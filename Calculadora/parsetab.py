
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDECLEFT CRIGHT DIVIDE EQUALS FLOAT INT MINUS MULTIPLY NAME PLEFT PLUS PRIGHT\n    calc : expression\n         | var_assign\n         | empty\n    \n    var_assign : NAME EQUALS expression\n    \n    expression  : PLEFT expression PRIGHT\n                | CLEFT expression CRIGHT\n    \n    expression : expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression PLUS expression\n               | expression MINUS expression\n    \n    expression : INT\n               | FLOAT\n    \n    expression : NAME\n    \n    empty : \n    '
    
_lr_action_items = {'PLEFT':([0,5,6,10,11,12,13,17,],[5,5,5,5,5,5,5,5,]),'CLEFT':([0,5,6,10,11,12,13,17,],[6,6,6,6,6,6,6,6,]),'INT':([0,5,6,10,11,12,13,17,],[7,7,7,7,7,7,7,7,]),'FLOAT':([0,5,6,10,11,12,13,17,],[8,8,8,8,8,8,8,8,]),'NAME':([0,5,6,10,11,12,13,17,],[9,15,15,15,15,15,15,15,]),'$end':([0,1,2,3,4,7,8,9,15,18,19,20,21,22,23,24,],[-14,0,-1,-2,-3,-11,-12,-13,-13,-7,-8,-9,-10,-5,-6,-4,]),'MULTIPLY':([2,7,8,9,14,15,16,18,19,20,21,22,23,24,],[10,-11,-12,-13,10,-13,10,-7,-8,10,10,-5,-6,10,]),'DIVIDE':([2,7,8,9,14,15,16,18,19,20,21,22,23,24,],[11,-11,-12,-13,11,-13,11,-7,-8,11,11,-5,-6,11,]),'PLUS':([2,7,8,9,14,15,16,18,19,20,21,22,23,24,],[12,-11,-12,-13,12,-13,12,-7,-8,-9,-10,-5,-6,12,]),'MINUS':([2,7,8,9,14,15,16,18,19,20,21,22,23,24,],[13,-11,-12,-13,13,-13,13,-7,-8,-9,-10,-5,-6,13,]),'PRIGHT':([7,8,14,15,18,19,20,21,22,23,],[-11,-12,22,-13,-7,-8,-9,-10,-5,-6,]),'CRIGHT':([7,8,15,16,18,19,20,21,22,23,],[-11,-12,-13,23,-7,-8,-9,-10,-5,-6,]),'EQUALS':([9,],[17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc':([0,],[1,]),'expression':([0,5,6,10,11,12,13,17,],[2,14,16,18,19,20,21,24,]),'var_assign':([0,],[3,]),'empty':([0,],[4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> expression','calc',1,'p_calc','calc.py',66),
  ('calc -> var_assign','calc',1,'p_calc','calc.py',67),
  ('calc -> empty','calc',1,'p_calc','calc.py',68),
  ('var_assign -> NAME EQUALS expression','var_assign',3,'p_var_assign','calc.py',74),
  ('expression -> PLEFT expression PRIGHT','expression',3,'p_group_expression','calc.py',80),
  ('expression -> CLEFT expression CRIGHT','expression',3,'p_group_expression','calc.py',81),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','calc.py',88),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','calc.py',89),
  ('expression -> expression PLUS expression','expression',3,'p_expression','calc.py',90),
  ('expression -> expression MINUS expression','expression',3,'p_expression','calc.py',91),
  ('expression -> INT','expression',1,'p_expression_int_float','calc.py',97),
  ('expression -> FLOAT','expression',1,'p_expression_int_float','calc.py',98),
  ('expression -> NAME','expression',1,'p_expression_var','calc.py',105),
  ('empty -> <empty>','empty',0,'p_empty','calc.py',114),
]
